const express = require('express');
const path = require('path');
const mariadb = require('mariadb');

const app = express();
const PORT = 3003;

// Middleware to parse URL-encoded data
app.use(express.urlencoded({ extended: false }));

// Serve static files (CSS)
app.use('/styles', express.static(path.join(__dirname, 'styles')));

// Set up EJS as the templating engine
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// MariaDB connection pool
const pool = mariadb.createPool({
    host: 'localhost',
    user: 'root', // Replace with your MariaDB username
    password: 'Pakhtoon2002@', // Replace with your MariaDB password
    database: 'final_project', // Replace with your MariaDB database name
    connectionLimit: 5,
});

// Home route: Display all events
app.get('/', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const events = await connection.query('SELECT * FROM events');
        console.log(events); // Debug: Log fetched events
        res.render('home', { events });
    } catch (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
    } finally {
        if (connection) connection.release();
    }
});

// Create Event
app.get('/create-event', (req, res) => {
    res.render('create-event');
});

app.post('/create-event', async (req, res) => {
    const { title, category, date, description, maxAttendees } = req.body;
    let connection;
    try {
        connection = await pool.getConnection();
        await connection.query(
            'INSERT INTO events (title, category, date, description, maxAttendees) VALUES (?, ?, ?, ?, ?)',
            [title, category, date, description, maxAttendees]
        );
        res.redirect('/');
    } catch (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
    } finally {
        if (connection) connection.release();
    }
});

// Register for Event
app.get('/register/:id', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const [event] = await connection.query('SELECT * FROM events WHERE id = ?', [req.params.id]);
        res.render('register', { event });
    } catch (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
    } finally {
        if (connection) connection.release();
    }
});

app.post('/register/:id', async (req, res) => {
    const { userName, email } = req.body;
    let connection;
    try {
        connection = await pool.getConnection();
        const [event] = await connection.query('SELECT * FROM events WHERE id = ?', [req.params.id]);

        if (event.attendees < event.maxAttendees) {
            await connection.query(
                'INSERT INTO registrations (eventId, userName, email) VALUES (?, ?, ?)',
                [req.params.id, userName, email]
            );
            await connection.query(
                'UPDATE events SET attendees = attendees + 1 WHERE id = ?',
                [req.params.id]
            );
            res.redirect('/');
        } else {
            res.send('Event is full!');
        }
    } catch (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
    } finally {
        if (connection) connection.release();
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});
